#include <iostream>
#include <vector>
#include <string>
#include <map>
#include "tstack.h"

using namespace std;

class TPostfix
{
private:
	string infix;  
	vector<string> postfix;  
	vector<char> lexems;  
	map<string, int> priority;  
	map<string, double> operands;  
public:
	TPostfix(string infx);			
	string GetInfix()const { return infix; }
	string GetPostfix()const;
	void Parse(); 
	void ToPostfix();
	double Calculate();
	bool IsCorrect()const;
	bool IsCorrectOperator()const;
	bool IsCorrectOperands()const;
	bool IsOperator(int ind)const;
	bool IncorrectSybol()const;
	void PrintInfix();
	void PrintPostfix();

};
/*
1) приоритет
	* /   (3)
	+ -   (2)
	(     (1)
	=     (0)

2) для хранения данных: 
	1 стек для хранения операндов и результатов
	2 стек для операций

3) исходное выражение просматривается слева направо до конца
	3.1) операнды по мере появления помещяются в стек
	3.2) символы операций помещаются в стек 2 по следующим правилам
		3.2.1) прои поялвении ) после изымаются последовательно из стека 2 и переносятся в стек 1 пока стек 2 или пока не (
		3.2.2) левая скобка кладется в стек 2
		3.2.3) если текущая операция полученная при обходе выражения имеет более низкий приоритет чем операция на вершине стека 2,
			   то все операции приоритет у которых >= приоритету текущего перекладываются из стека 2 в стек 1
		   
4) по завершении выражения из стека 2 перекладываются в стек 1 пока он не будет пуст

АЛГОРИТМ ВЫЧИСЛЕНИЯ ВЫРАЖЕНИЯ ЗАПИСАННОГО В ПОСТФИКСНОЙ ФОРМЕ
входные данные:
1) строка содержащая арифметическое выражение в постфиксной форме
2) пара переменная - значение переменной, переменная  (лучше использовать map или pair)

выходные данные: результат выражения

АЛГОРИТМ
1) пока не достигнут конец входной последовательности читаем очередную лексему
	1.1) если прочитан операнд, то значение операнда кладется в стек
	1.2) если прочитана операция, то из стека изымаются значения двух последних операндов, 
		 выполняем операцию в порядке обратном взятия из стека операндов,
		 результат кладется в стек
2) если достигнут конец входной последовательности, то результат хранится в стеке


ПРОВЕРКА КОРРЕКТНОСТИ ВЫРАЖЕНИЯ
1) правильность расставления скобок (с использованием стека для хранения индексов скобок)
	(A + B)C - F)
	1.| | | | |
	2.|(| | | |
	3.| | | | |
	4.|)| | | | -> выражение составлено неправильно

	((A + B)C - F
	1.| | | | |
	2.|(| | | |
	3.|(|(| | |
	4.|(| | | | -> выражение составлено неправильно

	((A + B)C - F)
	1.| | | | |
	2.|(| | | |
	3.|(|(| | |
	4.|(| | | |
	5.| | | | | -> выражение составлено правильно

2) пропущены ли операнды или знаки операций

3) недопустимые символы


ПРИМЕР
A + (B - C) * D - F / (G + H)

массив пар:
	A|0
	B|1
	C|2
	D|-1
	F|2
	G|0,5
	H|0,5

-> 0 + (1 - 2) * (-1) - 2 / (0,5 + 0,5) -> = -1

постфиксная форма: ABC-D*+FGH+/-

алгоритм перевода:
1.	A + (B - C) * D - F / (G + H)
    |

	1) |A| | | | | | | | | | | | | | |
	2) | | | | | | | | | | | | | | | |

2.	A + (B - C) * D - F / (G + H)
	  |

	1) |A| | | | | | | | | | | | | | |
	2) |+| | | | | | | | | | | | | | |

3.	A + (B - C) * D - F / (G + H)
		|

	1) |A| | | | | | | | | | | | | | |
	2) |+|(| | | | | | | | | | | | | |

4.	A + (B - C) * D - F / (G + H)
		 |

	1) |A|B| | | | | | | | | | | | | |
	2) |+|(| | | | | | | | | | | | | |

5.	A + (B - C) * D - F / (G + H)
		   |

	1) |A|B| | | | | | | | | | | | | |
	2) |+|(|-| | | | | | | | | | | | |

6.	A + (B - C) * D - F / (G + H)
		     |

	1) |A|B|C| | | | | | | | | | | | |
	2) |+|(|-| | | | | | | | | | | | |

7.	A + (B - C) * D - F / (G + H)
			  |

	1) |A|B|C|-| | | | | | | | | | | |
	2) |+| | | | | | | | | | | | | | |

8.	A + (B - C) * D - F / (G + H)
			    |

	1) |A|B|C|-| | | | | | | | | | | |
	2) |+|*| | | | | | | | | | | | | |

9.	A + (B - C) * D - F / (G + H)
				  |

	1) |A|B|C|-|D| | | | | | | | | | |
	2) |+|*| | | | | | | | | | | | | |

10.	A + (B - C) * D - F / (G + H)
				    |

	1) |A|B|C|-|D|*|+| | | | | | | | |
	2) |-| | | | | | | | | | | | | | |

11.	A + (B - C) * D - F / (G + H)
					  |

	1) |A|B|C|-|D|*|+|F| | | | | | | |
	2) |-| | | | | | | | | | | | | | |

12.	A + (B - C) * D - F / (G + H)
					    |

	1) |A|B|C|-|D|*|+|F| | | | | | | |
	2) |-|/| | | | | | | | | | | | | |

13.	A + (B - C) * D - F / (G + H)
						  |

	1) |A|B|C|-|D|*|+|F| | | | | | | |
	2) |-|/|(| | | | | | | | | | | | |

14.	A + (B - C) * D - F / (G + H)
						   |

	1) |A|B|C|-|D|*|+|F|G| | | | | | |
	2) |-|/|(| | | | | | | | | | | | |

15.	A + (B - C) * D - F / (G + H)
						     |

	1) |A|B|C|-|D|*|+|F|G| | | | | | |
	2) |-|/|(|+| | | | | | | | | | | |

16.	A + (B - C) * D - F / (G + H)
							   |

	1) |A|B|C|-|D|*|+|F|G|H| | | | | |
	2) |-|/|(|+| | | | | | | | | | | |

17.	A + (B - C) * D - F / (G + H)
							    |

	1) |A|B|C|-|D|*|+|F|G|H|+| | | | |
	2) |-|/| | | | | | | | | | | | | |

18.	A + (B - C) * D - F / (G + H)
								|

	1) |A|B|C|-|D|*|+|F|G|H|+|/|-| | |
	2) | | | | | | | | | | | | | | | |

АЛГОРИТМ ВЫЧИИСЛЕНИЯ

1. A B C - D * + F G H + / -
   |

   |0| | | | | | |

2. A B C - D * + F G H + / -
     |

   |0|1| | | | | |

3. A B C - D * + F G H + / -
	   |

   |0|1|2| | | | |

4. A B C - D * + F G H + / -
	     |

   |0|-1| | | | | |

5. A B C - D * + F G H + / -
		   |

   |0|-1|-1| | | | |

6. A B C - D * + F G H + / -
		     |

   |0|1| | | | | |

7. A B C - D * + F G H + / -
			   |

   |1| | | | | | |

8. A B C - D * + F G H + / -
			     |

   |1|2| | | | | |

9. A B C - D * + F G H + / -
				   |

   |1|2|0,5| | | | |

10. A B C - D * + F G H + / -
				      |

   |1|2|0,5|0,5| | | |

11. A B C - D * + F G H + / -
					    |

   |1|2|1| | | | |

12. A B C - D * + F G H + / -
						  |

   |1|2| | | | | |

13. A B C - D * + F G H + / -
						    |

   |-1| | | | | | |
*/